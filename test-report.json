{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 18,
  "numPassedTests": 142,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 18,
  "numTotalTests": 142,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1728673088766,
  "success": true,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ProductService", "getAll"],
          "duration": 27,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService getAll should return all products with pagination",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all products with pagination"
        },
        {
          "ancestorTitles": ["ProductService", "byId"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService byId should return a product by uuid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a product by uuid"
        },
        {
          "ancestorTitles": ["ProductService", "byId"],
          "duration": 30,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService byId should throw an error if product is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if product is not found"
        },
        {
          "ancestorTitles": ["ProductService", "createProduct"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService createProduct should create a new product",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new product"
        },
        {
          "ancestorTitles": ["ProductService", "createProduct"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService createProduct should throw NotFoundException if subcategory does not exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw NotFoundException if subcategory does not exist"
        },
        {
          "ancestorTitles": ["ProductService", "updateProduct"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService updateProduct should update a product",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should update a product"
        },
        {
          "ancestorTitles": ["ProductService", "updateProduct"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService updateProduct should throw UnauthorizedException if subcategory does not exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw UnauthorizedException if subcategory does not exist"
        },
        {
          "ancestorTitles": ["ProductService", "deleteProduct"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService deleteProduct should delete a product by uuid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 8,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete a product by uuid"
        },
        {
          "ancestorTitles": ["ProductService", "deleteProduct"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductService deleteProduct should throw an error if product is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if product is not found"
        }
      ],
      "endTime": 1728673096433,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/product/product.service.spec.ts",
      "startTime": 1728673088969,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["ProductController"],
          "duration": 23,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["ProductController", "getAll"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController getAll should call ProductService.getAll with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.getAll with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "getSimilar"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController getSimilar should call ProductService.getSimilar with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.getSimilar with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "getProductBySlug"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController getProductBySlug should call ProductService.bySlug with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.bySlug with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "getProductsByCategory"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController getProductsByCategory should call ProductService.bySubcategory with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.bySubcategory with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "getRecommendedProducts"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController getRecommendedProducts should call ProductService.recommendations with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.recommendations with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "click"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController click should call ProductService.click with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.click with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "createProduct"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController createProduct should call ProductService.createProduct with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.createProduct with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "updateProduct"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController updateProduct should call ProductService.updateProduct with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.updateProduct with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "deleteProduct"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController deleteProduct should call ProductService.deleteProduct with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.deleteProduct with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "getProduct"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController getProduct should call ProductService.byId with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call ProductService.byId with correct parameters"
        },
        {
          "ancestorTitles": ["ProductController", "getProduct"],
          "duration": 20,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "ProductController getProduct should throw an error if product is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if product is not found"
        }
      ],
      "endTime": 1728673096508,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/product/product.controller.spec.ts",
      "startTime": 1728673088977,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AuthService"],
          "duration": 15,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["AuthService", "login"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService login should return a valid access and refresh token for valid credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a valid access and refresh token for valid credentials"
        },
        {
          "ancestorTitles": ["AuthService", "login"],
          "duration": 16,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService login should throw UnauthorizedException for invalid credentials",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw UnauthorizedException for invalid credentials"
        },
        {
          "ancestorTitles": ["AuthService", "verifyAccessToken"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService verifyAccessToken should return user role for a valid access token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return user role for a valid access token"
        },
        {
          "ancestorTitles": ["AuthService", "verifyAccessToken"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService verifyAccessToken should throw UnauthorizedException for an invalid access token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw UnauthorizedException for an invalid access token"
        },
        {
          "ancestorTitles": ["AuthService", "register"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService register should successfully register a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully register a user"
        },
        {
          "ancestorTitles": ["AuthService", "register"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService register should throw BadGatewayException if user already exists",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if user already exists"
        },
        {
          "ancestorTitles": ["AuthService", "getNewToken"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService getNewToken should return a new access token for a valid refresh token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a new access token for a valid refresh token"
        },
        {
          "ancestorTitles": ["AuthService", "getNewToken"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService getNewToken should throw UnauthorizedException for an invalid refresh token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw UnauthorizedException for an invalid refresh token"
        },
        {
          "ancestorTitles": ["AuthService", "phoneRegister"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService phoneRegister should register a user by phone number and return tokens",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should register a user by phone number and return tokens"
        },
        {
          "ancestorTitles": ["AuthService", "resetPassword"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService resetPassword should send reset password email for an existing user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should send reset password email for an existing user"
        },
        {
          "ancestorTitles": ["AuthService", "resetPassword"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService resetPassword should throw NotFoundException if user does not exist",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw NotFoundException if user does not exist"
        },
        {
          "ancestorTitles": ["AuthService", "updatePassword"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService updatePassword should successfully update the password for a user with a valid reset token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully update the password for a user with a valid reset token"
        },
        {
          "ancestorTitles": ["AuthService", "updatePassword"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthService updatePassword should throw NotFoundException if reset token is invalid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw NotFoundException if reset token is invalid"
        }
      ],
      "endTime": 1728673097172,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/auth/auth.service.spec.ts",
      "startTime": 1728673096445,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AddressService"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["AddressService", "createAddress"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService createAddress should successfully set current address for the user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully set current address for the user"
        },
        {
          "ancestorTitles": ["AddressService", "createAddress"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService createAddress should successfully create a new address",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully create a new address"
        },
        {
          "ancestorTitles": ["AddressService", "getAddresses"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService getAddresses should successfully retrieve all addresses for a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully retrieve all addresses for a user"
        },
        {
          "ancestorTitles": ["AddressService", "getAddresses"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService getAddresses should return an array of addresses for the user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return an array of addresses for the user"
        },
        {
          "ancestorTitles": ["AddressService", "setCurrentAddress"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService setCurrentAddress should successfully set the current address for a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully set the current address for a user"
        }
      ],
      "endTime": 1728673097516,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/address/address.service.spec.ts",
      "startTime": 1728673097180,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SubcategoryService"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["SubcategoryService", "byId"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService byId should return a subcategory by uuid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a subcategory by uuid"
        },
        {
          "ancestorTitles": ["SubcategoryService", "byId"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService byId should throw an error if subcategory is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if subcategory is not found"
        },
        {
          "ancestorTitles": ["SubcategoryService", "create"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService create should create a new subcategory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new subcategory"
        },
        {
          "ancestorTitles": ["SubcategoryService", "create"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService create should throw BadGatewayException if creation fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if creation fails"
        },
        {
          "ancestorTitles": ["SubcategoryService", "findAll"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService findAll should return all subcategories for a given categoryUuid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all subcategories for a given categoryUuid"
        },
        {
          "ancestorTitles": ["SubcategoryService", "findAll"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService findAll should throw BadGatewayException if fetching fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if fetching fails"
        },
        {
          "ancestorTitles": ["SubcategoryService", "remove"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService remove should delete a subcategory by uuid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete a subcategory by uuid"
        },
        {
          "ancestorTitles": ["SubcategoryService", "remove"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryService remove should throw BadGatewayException if deletion fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if deletion fails"
        }
      ],
      "endTime": 1728673097802,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/subcategory/subcategory.service.spec.ts",
      "startTime": 1728673097521,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["BotService"],
          "duration": 75,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "BotService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["BotService", "sendOrderNotification"],
          "duration": 17,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "BotService sendOrderNotification should send a notification with the correct message format",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should send a notification with the correct message format"
        },
        {
          "ancestorTitles": ["BotService", "sendOrderNotification"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "BotService sendOrderNotification should throw BadRequestException if sending the message fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadRequestException if sending the message fails"
        },
        {
          "ancestorTitles": ["OrderService"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["OrderService", "placeOrder"],
          "duration": 244,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderService placeOrder should place an order successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should place an order successfully"
        },
        {
          "ancestorTitles": ["OrderService", "placeOrder"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderService placeOrder should throw BadGatewayException if some items are not in stock",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if some items are not in stock"
        },
        {
          "ancestorTitles": ["OrderService", "getOrderById"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderService getOrderById should return an order for a given ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return an order for a given ID"
        },
        {
          "ancestorTitles": ["OrderService", "getOrderById"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderService getOrderById should throw HttpException if order is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw HttpException if order is not found"
        },
        {
          "ancestorTitles": ["OrderService", "cancelOrder"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderService cancelOrder should cancel an order successfully",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should cancel an order successfully"
        },
        {
          "ancestorTitles": ["OrderService", "updateStatus"],
          "duration": 286,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderService updateStatus should update the status of an order and generate receipt if paid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should update the status of an order and generate receipt if paid"
        }
      ],
      "endTime": 1728673097876,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/order/order.service.spec.ts",
      "startTime": 1728673088986,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["OrderController"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["OrderController", "getAll"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController getAll should call OrderService.getAll with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.getAll with correct parameters"
        },
        {
          "ancestorTitles": ["OrderController", "getByUserId"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController getByUserId should call OrderService.getByUserId with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.getByUserId with correct parameters"
        },
        {
          "ancestorTitles": ["OrderController", "getByUuid"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController getByUuid should call OrderService.getOrderById with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.getOrderById with correct parameters"
        },
        {
          "ancestorTitles": ["OrderController", "cancelOrder"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController cancelOrder should call OrderService.cancelOrder with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.cancelOrder with correct parameters"
        },
        {
          "ancestorTitles": ["OrderController", "placeOrder"],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController placeOrder should call OrderService.placeOrder with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.placeOrder with correct parameters"
        },
        {
          "ancestorTitles": ["OrderController", "updateStatus"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController updateStatus should call OrderService.updateStatus with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.updateStatus with correct parameters"
        },
        {
          "ancestorTitles": ["OrderController", "uploadReceipt"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController uploadReceipt should call OrderService.getOrderById and send receipt file",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.getOrderById and send receipt file"
        },
        {
          "ancestorTitles": ["OrderController", "actualizeOrder"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController actualizeOrder should call OrderService.actualizeOrder with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.actualizeOrder with correct parameters"
        },
        {
          "ancestorTitles": ["OrderController", "deleteOrder"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "OrderController deleteOrder should call OrderService.deleteOrder with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call OrderService.deleteOrder with correct parameters"
        }
      ],
      "endTime": 1728673098097,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/order/order.controller.spec.ts",
      "startTime": 1728673096522,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CategoryService"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["CategoryService", "byId"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService byId should return a category by ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a category by ID"
        },
        {
          "ancestorTitles": ["CategoryService", "byId"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService byId should throw an error if category not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if category not found"
        },
        {
          "ancestorTitles": ["CategoryService", "bySlug"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService bySlug should return a category by slug",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a category by slug"
        },
        {
          "ancestorTitles": ["CategoryService", "bySlug"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService bySlug should throw NotFoundException if category not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw NotFoundException if category not found"
        },
        {
          "ancestorTitles": ["CategoryService", "getAll"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService getAll should return all categories",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all categories"
        },
        {
          "ancestorTitles": ["CategoryService", "createCategory"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService createCategory should create a new category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new category"
        },
        {
          "ancestorTitles": ["CategoryService", "updateCategory"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService updateCategory should update an existing category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should update an existing category"
        },
        {
          "ancestorTitles": ["CategoryService", "deleteCategory"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryService deleteCategory should delete a category and its subcategories",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete a category and its subcategories"
        }
      ],
      "endTime": 1728673098140,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/category/category.service.spec.ts",
      "startTime": 1728673097808,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["FileUploadService", "uploadFiles"],
          "duration": 10,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadService uploadFiles should upload multiple files and update product images",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should upload multiple files and update product images"
        },
        {
          "ancestorTitles": ["FileUploadService", "uploadFile"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadService uploadFile should upload a file and update subcategory icon",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should upload a file and update subcategory icon"
        },
        {
          "ancestorTitles": ["FileUploadService", "updateAvatar"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadService updateAvatar should update user avatar",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should update user avatar"
        },
        {
          "ancestorTitles": ["FileUploadService", "updateAvatar"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadService updateAvatar should throw BadGatewayException if update fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if update fails"
        },
        {
          "ancestorTitles": ["FileUploadService", "deleteImageInProduct"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadService deleteImageInProduct should delete an image from product and add default if no images left",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete an image from product and add default if no images left"
        },
        {
          "ancestorTitles": ["FileUploadService", "deleteImageInProduct"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadService deleteImageInProduct should delete an image from product without adding default if images remain",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete an image from product without adding default if images remain"
        },
        {
          "ancestorTitles": ["FileUploadService", "deleteImageInProduct"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadService deleteImageInProduct should throw BadGatewayException if delete fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if delete fails"
        }
      ],
      "endTime": 1728673098309,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/file-upload/file-upload.service.spec.ts",
      "startTime": 1728673097886,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["UserService", "byId"],
          "duration": 7,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserService byId should return a user by uuid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a user by uuid"
        },
        {
          "ancestorTitles": ["UserService", "byId"],
          "duration": 19,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserService byId should throw an error if user is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if user is not found"
        },
        {
          "ancestorTitles": ["UserService", "updateProfile"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserService updateProfile should update user profile",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should update user profile"
        },
        {
          "ancestorTitles": ["UserService", "updateProfile"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserService updateProfile should throw BadRequestException if email is already in use",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadRequestException if email is already in use"
        },
        {
          "ancestorTitles": ["UserService", "toggleFavorite"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserService toggleFavorite should add product to favorites if not already exists",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should add product to favorites if not already exists"
        },
        {
          "ancestorTitles": ["UserService", "toggleFavorite"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserService toggleFavorite should remove product from favorites if it already exists",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should remove product from favorites if it already exists"
        },
        {
          "ancestorTitles": ["UserService", "getAll"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserService getAll should return all users",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all users"
        }
      ],
      "endTime": 1728673098583,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/user/user.service.spec.ts",
      "startTime": 1728673098108,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["SubcategoryController"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["SubcategoryController", "create"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryController create should create a new subcategory",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new subcategory"
        },
        {
          "ancestorTitles": ["SubcategoryController", "findAll"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryController findAll should return all subcategories for a given categoryUuid",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all subcategories for a given categoryUuid"
        },
        {
          "ancestorTitles": ["SubcategoryController", "remove"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryController remove should remove a subcategory and delete the icon file",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should remove a subcategory and delete the icon file"
        },
        {
          "ancestorTitles": ["SubcategoryController", "remove"],
          "duration": 36,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "SubcategoryController remove should throw an HttpException if file is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an HttpException if file is not found"
        }
      ],
      "endTime": 1728673098675,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/subcategory/subcategory.controller.spec.ts",
      "startTime": 1728673098146,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["CategoryController"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["CategoryController", "getAll"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController getAll should return all categories",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return all categories"
        },
        {
          "ancestorTitles": ["CategoryController", "bySlug"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController bySlug should return a category by slug",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a category by slug"
        },
        {
          "ancestorTitles": ["CategoryController", "bySlug"],
          "duration": 22,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController bySlug should throw NotFoundException if category not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw NotFoundException if category not found"
        },
        {
          "ancestorTitles": ["CategoryController", "byId"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController byId should return a category by ID",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return a category by ID"
        },
        {
          "ancestorTitles": ["CategoryController", "createCategory"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController createCategory should create a new category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should create a new category"
        },
        {
          "ancestorTitles": ["CategoryController", "updateCategory"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController updateCategory should update an existing category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should update an existing category"
        },
        {
          "ancestorTitles": ["CategoryController", "deleteCategory"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "CategoryController deleteCategory should delete a category",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete a category"
        }
      ],
      "endTime": 1728673099053,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/category/category.controller.spec.ts",
      "startTime": 1728673098592,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AuthController"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["AuthController", "login"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthController login should successfully login a user and return tokens",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully login a user and return tokens"
        },
        {
          "ancestorTitles": ["AuthController", "getNewToken"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthController getNewToken should return new tokens for a valid refresh token",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return new tokens for a valid refresh token"
        },
        {
          "ancestorTitles": ["AuthController", "register"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthController register should successfully register a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully register a user"
        },
        {
          "ancestorTitles": ["AuthController", "register"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthController register should throw BadGatewayException if user already exists",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadGatewayException if user already exists"
        },
        {
          "ancestorTitles": ["AuthController", "resetPassword"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthController resetPassword should send reset password email for an existing user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should send reset password email for an existing user"
        },
        {
          "ancestorTitles": ["AuthController", "updatePassword"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AuthController updatePassword should successfully update the password for a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully update the password for a user"
        }
      ],
      "endTime": 1728673099312,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/auth/auth.controller.spec.ts",
      "startTime": 1728673098320,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["FileUploadController"],
          "duration": 13,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["FileUploadController", "createProduct"],
          "duration": 11,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadController createProduct should upload multiple files and return their filenames",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should upload multiple files and return their filenames"
        },
        {
          "ancestorTitles": ["FileUploadController", "createIcon"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadController createIcon should upload a file and return its filename",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should upload a file and return its filename"
        },
        {
          "ancestorTitles": ["FileUploadController", "updateAvatar"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadController updateAvatar should update the user avatar and return the filename",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should update the user avatar and return the filename"
        },
        {
          "ancestorTitles": ["FileUploadController", "deleteFile"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadController deleteFile should delete a file and return a success message",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should delete a file and return a success message"
        },
        {
          "ancestorTitles": ["FileUploadController", "deleteFile"],
          "duration": 19,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadController deleteFile should throw an HttpException if file is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an HttpException if file is not found"
        },
        {
          "ancestorTitles": ["FileUploadController", "serveFile"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "FileUploadController serveFile should serve the requested file",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should serve the requested file"
        }
      ],
      "endTime": 1728673099644,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/file-upload/file-upload.controller.spec.ts",
      "startTime": 1728673098689,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["UserController"],
          "duration": 25,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["UserController", "getProfile"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserController getProfile should call UserService.byId with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call UserService.byId with correct parameters"
        },
        {
          "ancestorTitles": ["UserController", "getProfile"],
          "duration": 12,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserController getProfile should throw an error if user is not found",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if user is not found"
        },
        {
          "ancestorTitles": ["UserController", "updateProfile"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserController updateProfile should call UserService.updateProfile with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call UserService.updateProfile with correct parameters"
        },
        {
          "ancestorTitles": ["UserController", "toggleFavorites"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserController toggleFavorites should call UserService.toggleFavorite with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call UserService.toggleFavorite with correct parameters"
        },
        {
          "ancestorTitles": ["UserController", "getAll"],
          "duration": 8,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "UserController getAll should call UserService.getAll and return the list of users",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call UserService.getAll and return the list of users"
        }
      ],
      "endTime": 1728673099689,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/user/user.controller.spec.ts",
      "startTime": 1728673099063,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["QRCodeService"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QRCodeService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["QRCodeService", "generateQRCode"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QRCodeService generateQRCode should generate a QR code and return a data URL",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should generate a QR code and return a data URL"
        },
        {
          "ancestorTitles": ["QRCodeService", "generateQRCode"],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "QRCodeService generateQRCode should throw an error if QR code generation fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw an error if QR code generation fails"
        }
      ],
      "endTime": 1728673099883,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/qrcode/qrcode.service.spec.ts",
      "startTime": 1728673099701,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["BotService"],
          "duration": 18,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "BotService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["BotService", "sendOrderNotification"],
          "duration": 35,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "BotService sendOrderNotification should send a notification with the correct message format",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should send a notification with the correct message format"
        },
        {
          "ancestorTitles": ["BotService", "sendOrderNotification"],
          "duration": 9,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "BotService sendOrderNotification should throw BadRequestException if sending the message fails",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw BadRequestException if sending the message fails"
        }
      ],
      "endTime": 1728673099908,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/bot/bot.service.spec.ts",
      "startTime": 1728673099354,
      "status": "passed",
      "summary": ""
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": ["AddressService"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["AddressService", "createAddress"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService createAddress should successfully set current address for the user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully set current address for the user"
        },
        {
          "ancestorTitles": ["AddressService", "createAddress"],
          "duration": 4,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService createAddress should successfully create a new address",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully create a new address"
        },
        {
          "ancestorTitles": ["AddressService", "getAddresses"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService getAddresses should successfully retrieve all addresses for a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully retrieve all addresses for a user"
        },
        {
          "ancestorTitles": ["AddressService", "getAddresses"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService getAddresses should return an array of addresses for the user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 3,
          "retryReasons": [],
          "status": "passed",
          "title": "should return an array of addresses for the user"
        },
        {
          "ancestorTitles": ["AddressService", "setCurrentAddress"],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressService setCurrentAddress should successfully set the current address for a user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should successfully set the current address for a user"
        },
        {
          "ancestorTitles": ["AddressController"],
          "duration": 6,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressController should be defined",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should be defined"
        },
        {
          "ancestorTitles": ["AddressController", "create"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressController create should call addressService.createAddress with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call addressService.createAddress with correct parameters"
        },
        {
          "ancestorTitles": ["AddressController", "findAll"],
          "duration": 2,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressController findAll should return an array of addresses for the user",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should return an array of addresses for the user"
        },
        {
          "ancestorTitles": ["AddressController", "findOne"],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "AddressController findOne should call addressService.setCurrentAddress with correct parameters",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 2,
          "retryReasons": [],
          "status": "passed",
          "title": "should call addressService.setCurrentAddress with correct parameters"
        }
      ],
      "endTime": 1728673100009,
      "message": "",
      "name": "/home/runner/work/Meta-shop/Meta-shop/backend/src/address/address.controller.spec.ts",
      "startTime": 1728673099664,
      "status": "passed",
      "summary": ""
    }
  ],
  "wasInterrupted": false
}
